// Code generated by mockery v2.38.0. DO NOT EDIT.

package todoist

import mock "github.com/stretchr/testify/mock"

// MockTodoistTransport is an autogenerated mock type for the TodoistTransport type
type MockTodoistTransport struct {
	mock.Mock
}

// completeTask provides a mock function with given fields: taskID
func (_m *MockTodoistTransport) completeTask(taskID string) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for completeTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// createTask provides a mock function with given fields: content, projectID
func (_m *MockTodoistTransport) createTask(content string, projectID string) (*Task, error) {
	ret := _m.Called(content, projectID)

	if len(ret) == 0 {
		panic("no return value specified for createTask")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*Task, error)); ok {
		return rf(content, projectID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *Task); ok {
		r0 = rf(content, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(content, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getAllTasks provides a mock function with given fields:
func (_m *MockTodoistTransport) getAllTasks() ([]Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAllTasks")
	}

	var r0 []Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getProjects provides a mock function with given fields:
func (_m *MockTodoistTransport) getProjects() ([]Project, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getProjects")
	}

	var r0 []Project
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Project, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getTaskLabels provides a mock function with given fields: taskID
func (_m *MockTodoistTransport) getTaskLabels(taskID string) ([]string, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for getTaskLabels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getTasksForProject provides a mock function with given fields: projectID
func (_m *MockTodoistTransport) getTasksForProject(projectID string) ([]Task, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for getTasksForProject")
	}

	var r0 []Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Task, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(string) []Task); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateTaskLabels provides a mock function with given fields: taskID, labels
func (_m *MockTodoistTransport) updateTaskLabels(taskID string, labels []string) error {
	ret := _m.Called(taskID, labels)

	if len(ret) == 0 {
		panic("no return value specified for updateTaskLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(taskID, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTodoistTransport creates a new instance of MockTodoistTransport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoistTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoistTransport {
	mock := &MockTodoistTransport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
